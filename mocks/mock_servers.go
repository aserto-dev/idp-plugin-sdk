// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aserto-dev/go-grpc/aserto/idpplugin/v1 (interfaces: Plugin_DeleteServer,Plugin_ExportServer,Plugin_ImportServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	idpplugin "github.com/aserto-dev/go-grpc/aserto/idpplugin/v1"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockPlugin_DeleteServer is a mock of Plugin_DeleteServer interface.
type MockPlugin_DeleteServer struct {
	ctrl     *gomock.Controller
	recorder *MockPlugin_DeleteServerMockRecorder
}

// MockPlugin_DeleteServerMockRecorder is the mock recorder for MockPlugin_DeleteServer.
type MockPlugin_DeleteServerMockRecorder struct {
	mock *MockPlugin_DeleteServer
}

// NewMockPlugin_DeleteServer creates a new mock instance.
func NewMockPlugin_DeleteServer(ctrl *gomock.Controller) *MockPlugin_DeleteServer {
	mock := &MockPlugin_DeleteServer{ctrl: ctrl}
	mock.recorder = &MockPlugin_DeleteServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin_DeleteServer) EXPECT() *MockPlugin_DeleteServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPlugin_DeleteServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPlugin_DeleteServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPlugin_DeleteServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockPlugin_DeleteServer) Recv() (*idpplugin.DeleteRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*idpplugin.DeleteRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPlugin_DeleteServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPlugin_DeleteServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockPlugin_DeleteServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPlugin_DeleteServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPlugin_DeleteServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockPlugin_DeleteServer) Send(arg0 *idpplugin.DeleteResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPlugin_DeleteServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPlugin_DeleteServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPlugin_DeleteServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPlugin_DeleteServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPlugin_DeleteServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockPlugin_DeleteServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPlugin_DeleteServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPlugin_DeleteServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockPlugin_DeleteServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPlugin_DeleteServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPlugin_DeleteServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPlugin_DeleteServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPlugin_DeleteServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPlugin_DeleteServer)(nil).SetTrailer), arg0)
}

// MockPlugin_ExportServer is a mock of Plugin_ExportServer interface.
type MockPlugin_ExportServer struct {
	ctrl     *gomock.Controller
	recorder *MockPlugin_ExportServerMockRecorder
}

// MockPlugin_ExportServerMockRecorder is the mock recorder for MockPlugin_ExportServer.
type MockPlugin_ExportServerMockRecorder struct {
	mock *MockPlugin_ExportServer
}

// NewMockPlugin_ExportServer creates a new mock instance.
func NewMockPlugin_ExportServer(ctrl *gomock.Controller) *MockPlugin_ExportServer {
	mock := &MockPlugin_ExportServer{ctrl: ctrl}
	mock.recorder = &MockPlugin_ExportServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin_ExportServer) EXPECT() *MockPlugin_ExportServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPlugin_ExportServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPlugin_ExportServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPlugin_ExportServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockPlugin_ExportServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPlugin_ExportServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPlugin_ExportServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockPlugin_ExportServer) Send(arg0 *idpplugin.ExportResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPlugin_ExportServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPlugin_ExportServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPlugin_ExportServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPlugin_ExportServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPlugin_ExportServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockPlugin_ExportServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPlugin_ExportServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPlugin_ExportServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockPlugin_ExportServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPlugin_ExportServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPlugin_ExportServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPlugin_ExportServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPlugin_ExportServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPlugin_ExportServer)(nil).SetTrailer), arg0)
}

// MockPlugin_ImportServer is a mock of Plugin_ImportServer interface.
type MockPlugin_ImportServer struct {
	ctrl     *gomock.Controller
	recorder *MockPlugin_ImportServerMockRecorder
}

// MockPlugin_ImportServerMockRecorder is the mock recorder for MockPlugin_ImportServer.
type MockPlugin_ImportServerMockRecorder struct {
	mock *MockPlugin_ImportServer
}

// NewMockPlugin_ImportServer creates a new mock instance.
func NewMockPlugin_ImportServer(ctrl *gomock.Controller) *MockPlugin_ImportServer {
	mock := &MockPlugin_ImportServer{ctrl: ctrl}
	mock.recorder = &MockPlugin_ImportServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin_ImportServer) EXPECT() *MockPlugin_ImportServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPlugin_ImportServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPlugin_ImportServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPlugin_ImportServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockPlugin_ImportServer) Recv() (*idpplugin.ImportRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*idpplugin.ImportRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPlugin_ImportServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPlugin_ImportServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockPlugin_ImportServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPlugin_ImportServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPlugin_ImportServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockPlugin_ImportServer) Send(arg0 *idpplugin.ImportResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPlugin_ImportServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPlugin_ImportServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPlugin_ImportServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPlugin_ImportServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPlugin_ImportServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockPlugin_ImportServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPlugin_ImportServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPlugin_ImportServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockPlugin_ImportServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPlugin_ImportServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPlugin_ImportServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPlugin_ImportServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPlugin_ImportServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPlugin_ImportServer)(nil).SetTrailer), arg0)
}
