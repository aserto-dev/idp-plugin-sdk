// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aserto-dev/idp-plugin-sdk/plugin (interfaces: PluginHandler,PluginConfig)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	api "github.com/aserto-dev/go-grpc/aserto/api/v1"
	plugin "github.com/aserto-dev/idp-plugin-sdk/plugin"
	gomock "github.com/golang/mock/gomock"
)

// MockPluginHandler is a mock of PluginHandler interface.
type MockPluginHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPluginHandlerMockRecorder
}

// MockPluginHandlerMockRecorder is the mock recorder for MockPluginHandler.
type MockPluginHandlerMockRecorder struct {
	mock *MockPluginHandler
}

// NewMockPluginHandler creates a new mock instance.
func NewMockPluginHandler(ctrl *gomock.Controller) *MockPluginHandler {
	mock := &MockPluginHandler{ctrl: ctrl}
	mock.recorder = &MockPluginHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginHandler) EXPECT() *MockPluginHandlerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPluginHandler) Close() (*plugin.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(*plugin.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close.
func (mr *MockPluginHandlerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPluginHandler)(nil).Close))
}

// Delete mocks base method.
func (m *MockPluginHandler) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPluginHandlerMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPluginHandler)(nil).Delete), arg0)
}

// GetConfig mocks base method.
func (m *MockPluginHandler) GetConfig() plugin.PluginConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(plugin.PluginConfig)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockPluginHandlerMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockPluginHandler)(nil).GetConfig))
}

// GetVersion mocks base method.
func (m *MockPluginHandler) GetVersion() (string, string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	return ret0, ret1, ret2
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockPluginHandlerMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockPluginHandler)(nil).GetVersion))
}

// Open mocks base method.
func (m *MockPluginHandler) Open(arg0 plugin.PluginConfig, arg1 plugin.OperationType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockPluginHandlerMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockPluginHandler)(nil).Open), arg0, arg1)
}

// Read mocks base method.
func (m *MockPluginHandler) Read() ([]*api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]*api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockPluginHandlerMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPluginHandler)(nil).Read))
}

// Write mocks base method.
func (m *MockPluginHandler) Write(arg0 *api.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockPluginHandlerMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockPluginHandler)(nil).Write), arg0)
}

// MockPluginConfig is a mock of PluginConfig interface.
type MockPluginConfig struct {
	ctrl     *gomock.Controller
	recorder *MockPluginConfigMockRecorder
}

// MockPluginConfigMockRecorder is the mock recorder for MockPluginConfig.
type MockPluginConfigMockRecorder struct {
	mock *MockPluginConfig
}

// NewMockPluginConfig creates a new mock instance.
func NewMockPluginConfig(ctrl *gomock.Controller) *MockPluginConfig {
	mock := &MockPluginConfig{ctrl: ctrl}
	mock.recorder = &MockPluginConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginConfig) EXPECT() *MockPluginConfigMockRecorder {
	return m.recorder
}

// Description mocks base method.
func (m *MockPluginConfig) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockPluginConfigMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockPluginConfig)(nil).Description))
}

// Validate mocks base method.
func (m *MockPluginConfig) Validate(arg0 plugin.OperationType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockPluginConfigMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockPluginConfig)(nil).Validate), arg0)
}
